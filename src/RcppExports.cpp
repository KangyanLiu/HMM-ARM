// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// logsum
double logsum(arma::vec y);
RcppExport SEXP _HMMARM_logsum(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(logsum(y));
    return rcpp_result_gen;
END_RCPP
}
// lAlphaBetaGamma
List lAlphaBetaGamma(arma::mat lemission, arma::mat A, arma::colvec Pi);
RcppExport SEXP _HMMARM_lAlphaBetaGamma(SEXP lemissionSEXP, SEXP ASEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type lemission(lemissionSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(lAlphaBetaGamma(lemission, A, Pi));
    return rcpp_result_gen;
END_RCPP
}
// AlphaBetaGamma_scaled
List AlphaBetaGamma_scaled(arma::mat emission, arma::mat A, arma::colvec Pi);
RcppExport SEXP _HMMARM_AlphaBetaGamma_scaled(SEXP emissionSEXP, SEXP ASEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type emission(emissionSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(AlphaBetaGamma_scaled(emission, A, Pi));
    return rcpp_result_gen;
END_RCPP
}
// Viterbi
IntegerVector Viterbi(arma::mat A, arma::colvec Pi, arma::mat emission);
RcppExport SEXP _HMMARM_Viterbi(SEXP ASEXP, SEXP PiSEXP, SEXP emissionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type emission(emissionSEXP);
    rcpp_result_gen = Rcpp::wrap(Viterbi(A, Pi, emission));
    return rcpp_result_gen;
END_RCPP
}
// UpdateTheta
arma::mat UpdateTheta(arma::vec yt, arma::vec logpi, arma::mat logA, arma::vec D, arma::vec CD, arma::vec C, double phi, arma::vec mu, arma::mat theta);
RcppExport SEXP _HMMARM_UpdateTheta(SEXP ytSEXP, SEXP logpiSEXP, SEXP logASEXP, SEXP DSEXP, SEXP CDSEXP, SEXP CSEXP, SEXP phiSEXP, SEXP muSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yt(ytSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type logpi(logpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logA(logASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type CD(CDSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateTheta(yt, logpi, logA, D, CD, C, phi, mu, theta));
    return rcpp_result_gen;
END_RCPP
}
// UpdateMu
arma::vec UpdateMu(arma::vec yt, arma::vec D, arma::vec C, arma::vec CD, double phi, arma::mat theta);
RcppExport SEXP _HMMARM_UpdateMu(SEXP ytSEXP, SEXP DSEXP, SEXP CSEXP, SEXP CDSEXP, SEXP phiSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yt(ytSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type CD(CDSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateMu(yt, D, C, CD, phi, theta));
    return rcpp_result_gen;
END_RCPP
}
// UpdateS2r
double UpdateS2r(arma::vec yt, arma::vec D, arma::vec CD, arma::vec C, double phi, arma::vec mu, arma::mat theta);
RcppExport SEXP _HMMARM_UpdateS2r(SEXP ytSEXP, SEXP DSEXP, SEXP CDSEXP, SEXP CSEXP, SEXP phiSEXP, SEXP muSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yt(ytSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type CD(CDSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateS2r(yt, D, CD, C, phi, mu, theta));
    return rcpp_result_gen;
END_RCPP
}
// l1
double l1(double phi, arma::vec y, arma::vec x, arma::vec D, arma::vec CD, double s2r, arma::vec mu, arma::mat theta);
RcppExport SEXP _HMMARM_l1(SEXP phiSEXP, SEXP ySEXP, SEXP xSEXP, SEXP DSEXP, SEXP CDSEXP, SEXP s2rSEXP, SEXP muSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type CD(CDSEXP);
    Rcpp::traits::input_parameter< double >::type s2r(s2rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(l1(phi, y, x, D, CD, s2r, mu, theta));
    return rcpp_result_gen;
END_RCPP
}
// l2
double l2(arma::vec logpi, arma::mat logA, arma::mat S);
RcppExport SEXP _HMMARM_l2(SEXP logpiSEXP, SEXP logASEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type logpi(logpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logA(logASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(l2(logpi, logA, S));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _HMMARM_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HMMARM_logsum", (DL_FUNC) &_HMMARM_logsum, 1},
    {"_HMMARM_lAlphaBetaGamma", (DL_FUNC) &_HMMARM_lAlphaBetaGamma, 3},
    {"_HMMARM_AlphaBetaGamma_scaled", (DL_FUNC) &_HMMARM_AlphaBetaGamma_scaled, 3},
    {"_HMMARM_Viterbi", (DL_FUNC) &_HMMARM_Viterbi, 3},
    {"_HMMARM_UpdateTheta", (DL_FUNC) &_HMMARM_UpdateTheta, 9},
    {"_HMMARM_UpdateMu", (DL_FUNC) &_HMMARM_UpdateMu, 6},
    {"_HMMARM_UpdateS2r", (DL_FUNC) &_HMMARM_UpdateS2r, 7},
    {"_HMMARM_l1", (DL_FUNC) &_HMMARM_l1, 8},
    {"_HMMARM_l2", (DL_FUNC) &_HMMARM_l2, 3},
    {"_HMMARM_rcpp_hello_world", (DL_FUNC) &_HMMARM_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_HMMARM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
